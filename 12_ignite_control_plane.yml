---
- name: Install cluster with kubeadm
  vars_files:
    - vars/k8s_cluster.yml
  hosts: masters
  run_once: true
  tasks:
    - block: 
        - name: Start kubeadm install
          shell: kubeadm init --pod-network-cidr={{ ('10.244.0.0/16' if (k8s.network.cni_plugin == 'flannel') else k8s.network.pod_cidr) | default('10.217.0.0/16') }} --service-cidr={{ k8s.network.service_cidr | default("10.96.0.0/12") }}
          become: true
          register: kubeadm_output
      when: k8s.control_plane.vms == 1

    - block:
        - name: Start kubeadm install - HA
          shell: kubeadm init --control-plane-endpoint {{ hostvars[groups['loadbalancer'][0]].node_fqdn }} --upload-certs --pod-network-cidr={{ ('10.244.0.0/16' if (k8s.network.cni_plugin == 'flannel') else k8s.network.pod_cidr) | default('10.217.0.0/16') }} --service-cidr={{ k8s.network.service_cidr | default("10.96.0.0/12") }}
          become: true
          register: kubeadm_output
        
        - name: "set certificate key fact"
          set_fact:
            kubecertkey: "{{ kubeadm_output.stdout | regex_search('certificate-key [0-9a-zA-Z]{64}') | regex_search('[0-9a-zA-Z]{64}') }}"
        
      when: 
        - k8s.control_plane.vms > 1

    - block:
        - name: "set token fact"
          set_fact:
            kubetoken: "{{Â kubeadm_output.stdout | regex_search('--token ([0-9a-zA-Z]{6}.[0-9a-zA-Z]{16})') | regex_search('([0-9a-zA-Z]{6}.[0-9a-zA-Z]{16})') }}"

        - name: "set hash fact"
          set_fact:
            kubehash: "{{ kubeadm_output.stdout | regex_search('sha256:[0-9a-zA-Z]{64}') | regex_search('[0-9a-zA-Z]{64}') }}"

    - name: Create kube directory
      file:
        path: /home/kube/.kube
        state: directory
 
    - name: Copy kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/kube/.kube/config
        remote_src: true
        owner: kube
        group: kube
      become: true

    - name: Wait for all control-plane pods become created
      shell: "kubectl get po --namespace=kube-system --selector tier=control-plane --output=jsonpath='{.items[*].metadata.name}'"
      register: control_plane_pods_created
      until: item in control_plane_pods_created.stdout
      retries: 10
      delay: 30
      with_items:
        - etcd
        - kube-apiserver
        - kube-controller-manager
        - kube-scheduler

    - name: Wait for control-plane pods become ready
      shell: "kubectl wait --namespace=kube-system --for=condition=Ready pods --selector tier=control-plane --timeout=600s"
      register: control_plane_pods_ready

    - set_fact:
        k8s_installed: true               
