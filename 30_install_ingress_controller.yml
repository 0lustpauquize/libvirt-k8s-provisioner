--- 
- name: Prepare cluster to install contour ingress controller
  hosts: masters
  vars_files:
    - vars/k8s_cluster.yml
  run_once: true
  tasks:
    - name: Take all required steps to install contour as ingress controller
      block:
        - name: Install CR
          shell: kubectl apply -f {{ ingresses.contour_repo }} 
       
        - name: Wait for all ingress-contour pods become created
          shell: "kubectl get po --namespace=projectcontour --output=jsonpath='{.items[*].metadata.name}'"
          register: ingress_contour_pods_created
          until: item in ingress_contour_pods_created.stdout
          retries: 10
          delay: 30
          with_items:
            - contour
            - envoy

        - name: Wait for contour and envoy pods pods to become ready
          shell: "kubectl wait --namespace=projectcontour --for=condition=Ready pods --selector=app=contour --timeout=600s"
          register: ingress_contour_pods_ready

        - name: Save nodePorts in master facts
          shell: kubectl get svc envoy -n projectcontour -o jsonpath='{..spec.ports[?(@.name=="{{ item }}")].nodePort}'
          loop:
            - http
            - https
          register: ports
        
        - name: Save facts
          set_fact:
            ingress_http_port: "{{ ports.results[0].stdout }}" 
            ingress_https_port: "{{ ports.results[1].stdout }}" 
      
      when: ingress_controller.install_ingress_controller and ingress_controller.type == 'contour'
       
    - name: Take all required steps to install haproxy as ingress controller
      block:
        - name: Install CRDs
          shell: kubectl apply -f {{ ingresses.haproxy_repo }} 
       
        - name: Wait for all ingress-haproxy pods become created
          shell: "kubectl get po --namespace=haproxy-controller --output=jsonpath='{.items[*].metadata.name}'"
          register: ingress_haproxy_pods_created
          until: item in ingress_haproxy_pods_created.stdout
          retries: 10
          delay: 30
          with_items:
            - haproxy-ingress
            - ingress-default-backend

        - name: Wait for ingress-haproxy pods to become ready
          shell: "kubectl wait --namespace=haproxy-controller --for=condition=Ready pods --all --timeout=600s"
          register: ingress_haproxy_pods_ready

        - name: Save nodePorts in master facts
          shell: kubectl get svc haproxy-ingress -n haproxy-controller -o jsonpath='{..spec.ports[?(@.name=="{{ item }}")].nodePort}'
          loop:
            - http
            - https
          register: ports
        
        - name: Save facts
          set_fact:
            ingress_http_port: "{{ ports.results[0].stdout }}" 
            ingress_https_port: "{{ ports.results[1].stdout }}" 
      
      when: ingress_controller.install_ingress_controller and ingress_controller.type == 'haproxy'
      
    - name: Take all required steps to install haproxy as ingress controller
      block:
        - name: Install CRDs
          shell: kubectl apply -f {{ ingresses.nginx_repo if k8s.cluster_version != '1.22' else ingresses.nginx_122_repo }}
       
        - name: Wait for all ingress-nginx pods become created
          shell: "kubectl get po --namespace=ingress-nginx --output=jsonpath='{.items[*].metadata.name}'"
          register: ingress_nginx_pods_created
          until: item in ingress_nginx_pods_created.stdout
          retries: 10
          delay: 30
          with_items:
            - ingress-nginx-admission-create
            - ingress-nginx-admission-patch
            - ingress-nginx-controller

        - name: Wait for ingress-nginx pods to become ready
          shell: "kubectl wait --namespace=ingress-nginx --for=condition=Ready pods --selector app.kubernetes.io/component=controller  --timeout=600s"
          register: ingress_nginx_pods_ready

        - name: Save nodePorts in master facts
          shell: kubectl get svc ingress-nginx-controller  -n ingress-nginx -o jsonpath='{..spec.ports[?(@.name=="{{ item }}")].nodePort}'
          loop:
            - http
            - https
          register: ports
        
        - name: Save facts
          set_fact:
            ingress_http_port: "{{ ports.results[0].stdout }}" 
            ingress_https_port: "{{ ports.results[1].stdout }}" 
      
      when: ingress_controller.install_ingress_controller and ingress_controller.type == 'nginx'

- name: Refresh facts
  hosts: all
  become: true
  gather_facts: true

- name: Trigger new haproxy configuration
  hosts: loadbalancer
  become: true
  vars_files:
    - vars/k8s_cluster.yml
  tasks: 
    - block:
        - name: Fire up new haproxy template
          template:
            src: templates/haproxy.j2
            dest: /etc/haproxy/haproxy.cfg

        - name: Restart haproxy
          systemd:
            name: haproxy
            state: restarted
      when:
        - ingress_controller.install_ingress_controller
        - k8s.control_plane.vms > 1

- name: Save new haproxy configuration
  hosts: vm_host
  become: true
  vars_files:
    - vars/k8s_cluster.yml
  tasks:
    - block:
        - name: Fire up new haproxy template
          template:
            src: templates/haproxy.j2
            dest: clusters/{{ k8s.cluster_name }}/haproxy.cfg
      when: 
        - ingress_controller.install_ingress_controller
        - k8s.control_plane.vms == 1

