- name: This play provisions NFS Server VM for the cluster
  hosts: vm_host
  vars_files:
    - vars/k8s_cluster.yml
    
  tasks:
    - name: Provision NFS Server VM
      block:
        - terraform:
            project_path: "files/terraform/nfs"
            force_init: true
            variables:
              hostname: "{{ k8s.cluster_name }}-nfs"
              domain: "{{ k8s.network.domain }}"
              os: "{{ 'ubuntu' if k8s.cluster_os == 'Ubuntu' else 'centos' }}"
              libvirt_network: "{{ k8s.cluster_name }}"
              libvirt_pool: "{{ k8s.cluster_name }}"
              os_image_name: "{{ image_name }}.qcow2"
            state: present
          become: true
          register: output_nfs

        - name: Add loadbalancer to inventory
          add_host:
            hostname: '{{ k8s.cluster_name }}-nfs.{{ k8s.network.domain }}'
            node_hostname: '{{ k8s.cluster_name }}-nfs.{{ k8s.network.domain }}'
            node_mac: "{{ output_nfs.outputs.macs.value[0]|lower }}"
            node_fqdn: "{{ k8s.cluster_name }}-nfs.{{ k8s.network.domain }}"
            ansible_ssh_private_key_file: "id_rsa"
            ansible_user: kube
            ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
            groups:
              - "nfs"

        - name: Ensure to clean known_hosts
          known_hosts:
            host: "{{ item }}"
            path: ~/.ssh/known_hosts
            state: absent
          loop: "{{ groups['nfs'] }}"
          become: true
      when: k8s.storage.nfs_enabled

- name: Check connection to NFS server
  hosts: nfs
  gather_facts: no
  vars_files:
    - vars/k8s_cluster.yml
  tasks:
    - block:
        - name: Wait 600 seconds for target connection to become reachable/usable
          wait_for_connection:
            timeout: 600
            delay: 0
        - ping:
      when: k8s.storage.nfs_enabled

- name: Setup NFS server
  hosts: nfs
  vars_files:
    - vars/k8s_cluster.yml
  tasks:
    - name: Handle setup of NFS server
      block:
      - name: Manage packages on CentOS
        block:
        - name: Upgrade all packages
          yum:
            name: '*'
            state: latest
        - name: Install packages
          yum:
            name: "{{ packages_server.centos }}"
            state: latest
        when: k8s.cluster_os == 'CentOS'
      - name: Manage packages on Ubuntu
        block:
        - name: Upgrade all packages
          apt:
            name: '*'
            state: latest
        - name: Install packages
          apt:
            name: "{{ packages_server.ubuntu }}"
            state: latest
        when: k8s.cluster_os == 'Ubuntu'

      when: k8s.storage.nfs_enabled
